# 시험
# 트리 용어: 레벨, 깊이, 형제노드 등등
# 힙트리 : 삽입 생성, 삭제 연산, 속성 등을 기술
# 대부분 기술
# 이론 관련
# 프로그램 구현 x

# 탐색트리

# 삭제연산
# case 0: 삭제되는 노드가 자식이 없는 경우
# - 삭제해야 할 노드 n의 부모가 n을 가리키던 레퍼런스를 None 으로 만든다.
# case 1: 자식이 하나인 경우
# - n이 한쪽 자식인 c만 가지고 있다면, n의 부모와 n의 자식 c를 직접 연결
# case 2: 자식이 둘인 경우
# - n의 부모는 하나, 자식은 둘이므로, n의 자리에 중위 순회하면서 n을 방문하기 직전 노드
# 또는 직후에 방문되는 노드로 대체



# case 1: 단말 노드 삭제

# case 2: 자식이 하나인 노드 삭제
# 부보와 자식의 노드를 연결시킴

# case 3: 두개의 자식을 가진 노드 삭제


# 수행시간
# 트리를 한 층 내려갈 때 재귀호출 발생, 한층 올라갈 때는 재 연결 수행, 각각 O(1)
# 연산들의 수행 시간은 각각 트리의 높이(h)에 비례, O(h)


# AVL 트리(균형이진탐색트리)
# 삽입, 삭제시 균형이 깨지면 연산을 통해 트리의 균형을 유지한다.
# 트리의 높이가 O(logN) 이므로 수행시간이 O(logN)

# AVL 트리는 노드 x에 대해 x의 왼쪽 서브트리의 높이와 오른쪽 서브트리의 높이 차이가 1을 넘지
# 않는 이진 탐색 트리를 말한다.

# 중간고사 평균 60 점 정도


# 13 주차
# 그래프

#

def reverse(s):
    if len(s) > 1:
        return s[-1] + reverse(s[:-1],len(s[:-1]))
    else:
        return s

print(reverse('flower'))
