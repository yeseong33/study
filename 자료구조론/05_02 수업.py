# 큐

# Queue()
# isEmpty(): 큐가 비어있으면 True 를 아니면 False 를 반환한다.
# enqueue(x): 항목 x를 큐의 맨 뒤에 추가
# dequeue(): 큐의 맨 앞에 있는 항목을 꺼내 반환한다.
# peek()
# size()

# 파이썬이 아닌 다른 언어에서는 크기를 할당해줘야 하므로
# 크기가 다 찾는지에 대한 함수가 필요하다.


# 큐의 연산
# 스택과 달리 선입선출이므로 순서가 변하지 않는다.


# 큐의 응용


# 큐의 구현
# 선형큐는 비효율적
# 삽입삭제 연산시 맨앞의 항목을 꺼낼 경우 메모리 이동이 필요하므로 O(n)의
# 연산시간이 걸린다.

# 선형구조 큐 구현
# def add(item):
#     q.append(item)
# def remove():
#     if len(q) != 0:
#         item = q.pop(0)
#         return item
#
# def print_q():
#     print('front -> ', end = '')
#     for i in range(len(q)):
#         print('{!s:<8}'.format(q[i]), end = '')
#     print(' <-rear')
#
# q = []
# add('apple')
# ...


# 메모리적인 측면에서 원형 큐가 훨신 효율적이다.
# # #

## 스택 과제

# duplicate()
# upRotate(n)
# n개의 데이터를 회전시킨다. 맨 위 데이터를 임시 변수로 저장을 한 뒤 나머지 데이터를 올리고
# 임시변수를 index 한다.
# 단, 입력받은 n이 데이터 개수 보다 큰 경우에 아무 작업을 하지 않는다.

# downRotate(n):
# 마지막의 데이터를 임시 변수로 저장한 뒤 빈공간을 기준으로 내린다.
# 마지막으로 맨 위의 데이터에 임시변수를 저장해준다.
# 단, 입력받은 n이 데이터 개수 보다 큰 경우에 아무 작업을 하지 않는다.

# print():
# 탑에서 부터 출력되어야 한다. s[::-1](리스트를 꺼꾸로 뒤집는다.
# if break
# while 조건
# 종료조건이 있어야 한다.


## 큐 과제

# 원형큐
# 큐의 크기를 정해주어야 한다.
